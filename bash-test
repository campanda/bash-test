#!/usr/bin/env bash

function parse_opt {
  case $1 in
    h)
      display_help
      exit 0
      ;;
    v)
      echo "$version"
      exit 0
      ;;
    \?)
      echo -e "Invalid option: -$OPTARG\n"
      display_help
      exit 1
      ;;
  esac
}

function display_help {
  echo -e "Usage: bash-test file1 file2...\n"
  echo -e "Options:\n"
  echo -e "\t-h\tShows this help"
  echo -e "\t-v\tShows version\n"
}

function check_input_files {
  for file in "$@"; do
    test -f "$file" || { display_error_message "$file"; exit 1; }
  done
}

function display_header {
  echo -e "\033[34mbash-test $version by Campanda GmbH and contributors.\033[0m\n"
}

function display_error_message {
  echo -e "\033[31mERROR:\033[0m Invalid input file -> \033[33m$1\033[0m\n"
}

function get_loaded_tests {
  declare -F | cut -d' ' -f3 | grep "^test_"
}

function display_test_result {
  [ "$1" -eq 0 ] && echo -e "  \033[32m✓ $2\033[0m" || echo -e "  \033[31m✗ $2\033[0m"
}

function display_summary {
  if [ "$failed_tests" -gt 0 ]; then
    echo -e "\033[30;41m $failed_tests of $amount_of_tests tests failed.\033[0m"
  else
    echo -e "\033[30;42m $amount_of_tests tests completed.\033[0m"
  fi
}

version="v0.1.0"
amount_of_tests=0
failed_tests=0

while getopts ":hv" opt; do
  parse_opt "$opt"
done

check_input_files "$@"

time {
  display_header

  for test_file in "$@"; do
    # shellcheck source=/dev/null
    source "$test_file"
    basename "$test_file"

    for test_name in $(get_loaded_tests); do
      ((amount_of_tests++))

      $test_name
      result=$?

      [ $result -ne 0 ] && ((failed_tests++))
      display_test_result $result "$test_name"
      unset -f "$test_name"
    done

    echo ""
  done

  display_summary
}

exit $failed_tests
